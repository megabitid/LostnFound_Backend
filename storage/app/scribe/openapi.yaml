openapi: 3.0.3
info:
    title: 'Megabit Lost & Found'
    description: 'Lost & Found is an application that user can report when find or lost personal belongings in train stations.'
    version: 1.0.0
servers:
    -
        url: 'https://megabit-lostnfound.herokuapp.com'
paths:
    /api/v1/android/auth/oauth2/google/authorize:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'cURL error 6: Could not resolve host: www.googleapis.com (see https://curl.haxx.se/libcurl/c/libcurl-errors.html) for https://www.googleapis.com/oauth2/v4/token'
                                    class: GuzzleHttp\Exception\ConnectException
                                    trace: [{ file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php', line: 158, function: createRejection, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{ sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, { errno: 6, error: 'Could not resolve host: www.googleapis.com', appconnect_time: 0, url: 'https://www.googleapis.com/oauth2/v4/token', content_type: null, http_code: 0, header_size: 0, request_size: 0, filetime: -1, ssl_verify_result: 0, redirect_count: 0, total_time: 0.003536, namelookup_time: 0, connect_time: 0, pretransfer_time: 0, size_upload: 0, size_download: 0, speed_download: 0, speed_upload: 0, download_content_length: -1, upload_content_length: -1, starttransfer_time: 0, redirect_time: 0, redirect_url: '', primary_ip: '', certinfo: [], primary_port: 0, local_ip: '', local_port: 0, http_version: 0, protocol: 0, ssl_verifyresult: 0, scheme: '', appconnect_time_us: 0, connect_time_us: 0, namelookup_time_us: 0, pretransfer_time_us: 0, redirect_time_us: 0, starttransfer_time_us: 0, total_time_us: 3536, curl_version: 7.70.0 }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php', line: 110, function: finishError, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{  }, { sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlHandler.php', line: 47, function: finish, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{  }, { sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php', line: 28, function: __invoke, class: GuzzleHttp\Handler\CurlHandler, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php', line: 48, function: 'GuzzleHttp\Handler\{closure}', class: GuzzleHttp\Handler\Proxy, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php', line: 64, function: 'GuzzleHttp\Handler\{closure}', class: GuzzleHttp\Handler\Proxy, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Middleware.php', line: 31, function: __invoke, class: GuzzleHttp\PrepareBodyMiddleware, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php', line: 71, function: 'GuzzleHttp\{closure}', class: GuzzleHttp\Middleware, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Middleware.php', line: 63, function: __invoke, class: GuzzleHttp\RedirectMiddleware, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\HandlerStack.php', line: 75, function: 'GuzzleHttp\{closure}', class: GuzzleHttp\Middleware, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 331, function: __invoke, class: GuzzleHttp\HandlerStack, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 168, function: transfer, class: GuzzleHttp\Client, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 187, function: requestAsync, class: GuzzleHttp\Client, type: '->', args: [POST, {  }, { form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' }, synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false, _conditional: { User-Agent: GuzzleHttp/7 } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\ClientTrait.php', line: 95, function: request, class: GuzzleHttp\Client, type: '->', args: [POST, 'https://www.googleapis.com/oauth2/v4/token', { headers: { Accept: application/json }, form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' }, synchronous: true }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\socialite\src\Two\AbstractProvider.php', line: 273, function: post, class: GuzzleHttp\Client, type: '->', args: ['https://www.googleapis.com/oauth2/v4/token', { headers: { Accept: application/json }, form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\app\Http\Controllers\v1\Android\Oauth2Controller.php', line: 34, function: getAccessTokenResponse, class: Laravel\Socialite\Two\AbstractProvider, type: '->', args: [null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->', args: [handleGoogleCallback, [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 254, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, {  }, handleGoogleCallback] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 197, function: runController, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 692, function: run, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 41, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 127, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 103, function: handleRequest, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, [{ key: e7cf66797159dc3cd3e85f72e15bb551, maxAttempts: 60, decayMinutes: 1, responseCallback: null }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 55, function: handleRequestUsingNamedLimiter, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, api, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, api] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 694, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 669, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 635, function: runRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 624, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 166, function: dispatch, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 87, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fideloper\proxy\src\TrustProxies.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fideloper\Proxy\TrustProxies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 141, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 110, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [responses, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [[{  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 610, function: call, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], [], null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->', args: [[{  }, handle]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Command\Command.php', line: 255, function: execute, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 971, function: run, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 290, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 166, function: doRun, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 93, function: run, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->', args: [{  }, {  }] }]
                                properties:
                                    message: { type: string, example: 'cURL error 6: Could not resolve host: www.googleapis.com (see https://curl.haxx.se/libcurl/c/libcurl-errors.html) for https://www.googleapis.com/oauth2/v4/token' }
                                    class: { type: string, example: GuzzleHttp\Exception\ConnectException }
                                    trace: { type: array, example: [{ file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php', line: 158, function: createRejection, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{ sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, { errno: 6, error: 'Could not resolve host: www.googleapis.com', appconnect_time: 0, url: 'https://www.googleapis.com/oauth2/v4/token', content_type: null, http_code: 0, header_size: 0, request_size: 0, filetime: -1, ssl_verify_result: 0, redirect_count: 0, total_time: 0.003536, namelookup_time: 0, connect_time: 0, pretransfer_time: 0, size_upload: 0, size_download: 0, speed_download: 0, speed_upload: 0, download_content_length: -1, upload_content_length: -1, starttransfer_time: 0, redirect_time: 0, redirect_url: '', primary_ip: '', certinfo: [], primary_port: 0, local_ip: '', local_port: 0, http_version: 0, protocol: 0, ssl_verifyresult: 0, scheme: '', appconnect_time_us: 0, connect_time_us: 0, namelookup_time_us: 0, pretransfer_time_us: 0, redirect_time_us: 0, starttransfer_time_us: 0, total_time_us: 3536, curl_version: 7.70.0 }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php', line: 110, function: finishError, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{  }, { sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\CurlHandler.php', line: 47, function: finish, class: GuzzleHttp\Handler\CurlFactory, type: '::', args: [{  }, { sink: {  }, headers: [], response: null, request: {  }, options: { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }, errno: 6, onHeadersException: null, createResponseException: null }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php', line: 28, function: __invoke, class: GuzzleHttp\Handler\CurlHandler, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php', line: 48, function: 'GuzzleHttp\Handler\{closure}', class: GuzzleHttp\Handler\Proxy, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php', line: 64, function: 'GuzzleHttp\Handler\{closure}', class: GuzzleHttp\Handler\Proxy, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Middleware.php', line: 31, function: __invoke, class: GuzzleHttp\PrepareBodyMiddleware, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php', line: 71, function: 'GuzzleHttp\{closure}', class: GuzzleHttp\Middleware, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Middleware.php', line: 63, function: __invoke, class: GuzzleHttp\RedirectMiddleware, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\HandlerStack.php', line: 75, function: 'GuzzleHttp\{closure}', class: GuzzleHttp\Middleware, type: '::', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 331, function: __invoke, class: GuzzleHttp\HandlerStack, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 168, function: transfer, class: GuzzleHttp\Client, type: '->', args: [{  }, { synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\Client.php', line: 187, function: requestAsync, class: GuzzleHttp\Client, type: '->', args: [POST, {  }, { form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' }, synchronous: true, handler: {  }, allow_redirects: { max: 5, protocols: [http, https], strict: false, referer: false, track_redirects: false }, http_errors: true, decode_content: true, verify: true, cookies: false, idn_conversion: false, _conditional: { User-Agent: GuzzleHttp/7 } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\guzzlehttp\guzzle\src\ClientTrait.php', line: 95, function: request, class: GuzzleHttp\Client, type: '->', args: [POST, 'https://www.googleapis.com/oauth2/v4/token', { headers: { Accept: application/json }, form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' }, synchronous: true }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\socialite\src\Two\AbstractProvider.php', line: 273, function: post, class: GuzzleHttp\Client, type: '->', args: ['https://www.googleapis.com/oauth2/v4/token', { headers: { Accept: application/json }, form_params: { grant_type: authorization_code, client_id: 304092645592-42g8iugfoohtdgq3jqgio9h67ojb7vhh.apps.googleusercontent.com, client_secret: noXkPSo7ZalqZoMeYJXgvnmt, code: null, redirect_uri: 'http://localhost:8000/api/v1/android/auth/oauth2/google/authorize' } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\app\Http\Controllers\v1\Android\Oauth2Controller.php', line: 34, function: getAccessTokenResponse, class: Laravel\Socialite\Two\AbstractProvider, type: '->', args: [null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->', args: [handleGoogleCallback, [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 254, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, {  }, handleGoogleCallback] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 197, function: runController, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 692, function: run, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 41, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 127, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 103, function: handleRequest, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, [{ key: e7cf66797159dc3cd3e85f72e15bb551, maxAttempts: 60, decayMinutes: 1, responseCallback: null }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php', line: 55, function: handleRequestUsingNamedLimiter, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, api, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\ThrottleRequests, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, api] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 694, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 669, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 635, function: runRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 624, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 166, function: dispatch, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 87, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fideloper\proxy\src\TrustProxies.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fideloper\Proxy\TrustProxies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 141, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 110, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [responses, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ name: App\Http\Controllers\v1\Android\Oauth2Controller }, { name: handleGoogleCallback, class: App\Http\Controllers\v1\Android\Oauth2Controller }, { uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: d7770fbdcc266a6e29f94b49f98f9dcd, methods: [GET], uri: api/v1/android/auth/oauth2/google/authorize, metadata: { groupName: 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)', groupDescription: '', title: '', description: '', authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: api/v1/android/auth/oauth2/google/authorize, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ uri: api/v1/android/auth/oauth2/google/authorize, methods: [GET, HEAD], action: { middleware: [api], uses: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, controller: App\Http\Controllers\v1\Android\Oauth2Controller@handleGoogleCallback, namespace: null, prefix: api/v1/android/auth, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [api], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [[{  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 610, function: call, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], [], null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->', args: [[{  }, handle]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Command\Command.php', line: 255, function: execute, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 971, function: run, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 290, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 166, function: doRun, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 93, function: run, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->', args: [{  }, {  }] }], items: { type: object } }
            tags:
                - 'v1 - Authenticate OAuth2 User (Deprecated, please use v2!)'
    /api/v1/android/auth/login:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'v1 - Authenticate User (Deprecated, please use v2!)'
    /api/v1/android/auth/register:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'v1 - Authenticate User (Deprecated, please use v2!)'
    /api/v1/android/auth/logout:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Authenticate User (Deprecated, please use v2!)'
            security: []
    /api/v1/android/auth/refresh:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Authenticate User (Deprecated, please use v2!)'
            security: []
    /api/v1/web/auth/login:
        post:
            summary: 'Login Admin User.'
            description: "Admin/super admin user can login using this API.\n\n_Token lifetime for admin is 60 minutes._\nYou can check token expiration time using exp field returned.\nVisit here <a href=\"https://www.epochconverter.com/\">https://www.epochconverter.com/</a>"
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Dr. Mathias Rohan II'
                                    nip: '4539422570508851'
                                    email: null
                                    email_verified_at: null
                                    image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus'
                                    role: 2
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: null
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E
                                    exp: 1607737185
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Dr. Mathias Rohan II' }
                                    nip: { type: string, example: '4539422570508851' }
                                    email: { type: string, example: null }
                                    email_verified_at: { type: string, example: null }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/008800?text=doloribus' }
                                    role: { type: integer, example: 2 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E }
                                    exp: { type: integer, example: 1607737185 }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ]\n }"
                401:
                    description: '401, login failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Authentication credentials were missing or incorrect'
                                properties:
                                    message: { type: string, example: 'Authentication credentials were missing or incorrect' }
            tags:
                - 'v1 - Authenticate User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: '4539422570508851'
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                            required:
                                - nip
                                - password
            security: []
    /api/v1/web/auth/register:
        post:
            summary: 'Register Admin User.'
            description: 'Admin/super admin user can be registered by super admin using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: Admin
                                    nip: A12345
                                    image: 'https://some-url-to-image'
                                    stasiun_id: 1
                                    role: 1
                                    updated_at: '2020-12-12T00:54:24.000000Z'
                                    created_at: '2020-12-12T00:54:21.000000Z'
                                    id: 7
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWdpc3RlciIsImlhdCI6MTYwNzczNDQ2NCwiZXhwIjoxNjA3NzM4MDY0LCJuYmYiOjE2MDc3MzQ0NjQsImp0aSI6InBvamVxZWM2WFM5Z2lxMmwiLCJzdWIiOjcsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.wJrfZSmEEappLwT3nQHLq70y6ceAubIo8uI50amQp64
                                    exp: 1607738064
                                properties:
                                    nama: { type: string, example: Admin }
                                    nip: { type: string, example: A12345 }
                                    image: { type: string, example: 'https://some-url-to-image' }
                                    stasiun_id: { type: integer, example: 1 }
                                    role: { type: integer, example: 1 }
                                    updated_at: { type: string, example: '2020-12-12T00:54:24.000000Z' }
                                    created_at: { type: string, example: '2020-12-12T00:54:21.000000Z' }
                                    id: { type: integer, example: 7 }
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWdpc3RlciIsImlhdCI6MTYwNzczNDQ2NCwiZXhwIjoxNjA3NzM4MDY0LCJuYmYiOjE2MDc3MzQ0NjQsImp0aSI6InBvamVxZWM2WFM5Z2lxMmwiLCJzdWIiOjcsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.wJrfZSmEEappLwT3nQHLq70y6ceAubIo8uI50amQp64 }
                                    exp: { type: integer, example: 1607738064 }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
            tags:
                - 'v1 - Authenticate User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: Admin
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: A12345
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: uribase64
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: '1'
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: '1'
                            required:
                                - nama
                                - nip
                                - password
                                - image
    /api/v1/web/auth/logout:
        get:
            summary: 'Logout Admin User'
            description: 'When logout authenticated token will not work anymore.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n message\": \"successfully logout\"\n}"
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v1 - Authenticate User Admin'
    /api/v1/web/auth/refresh:
        get:
            summary: 'Refresh token'
            description: "Authenticated token can be refreshed to extend its lifetime before it's expired.\nRecommend: 15 minutes before it's expired"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM
                                    exp: 1607738546
                                properties:
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM }
                                    exp: { type: integer, example: 1607738546 }
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v1 - Authenticate User Admin'
    '/api/v1/barang/{id}':
        delete:
            summary: 'Delete Barang.'
            description: 'Will delete barang and all of its images.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang'
        put:
            summary: 'Update Barang.'
            description: 'Will update barang.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, update success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: null
                                    updated_at: '2020-12-10T15:25:46.000000Z'
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe Updated Partially'
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: '67934 Juvenal Place\nJeffport, OR 75023-4991'
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: Salmon
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: Heaney-Hansen
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: 5
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: 4
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: 4
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: 3
                            required:
                                - nama_barang
                                - lokasi
                                - deskripsi
                                - warna
                                - merek
                                - user_id
                                - status_id
                                - stasiun_id
                                - kategori_id
        patch:
            summary: 'Partial Update Barang.'
            description: 'Will update barang partially.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, update success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated Partially'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: null
                                    updated_at: '2020-12-10T15:25:46.000000Z'
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated Partially' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang must be a string.'], lokasi: ['The lokasi must be a string.'], deskripsi: ['The deskripsi must be a string.'], warna: ['The warna must be a string.'], merek: ['The merek must be a string.'], user_id: ['The user id must be a number.'], stasiun_id: ['The stasiun id must be a number.'], status_id: ['The status id must be a number.'], kategori_id: ['The kategori id must be a number.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang must be a string.'], lokasi: ['The lokasi must be a string.'], deskripsi: ['The deskripsi must be a string.'], warna: ['The warna must be a string.'], merek: ['The merek must be a string.'], user_id: ['The user id must be a number.'], stasiun_id: ['The stasiun id must be a number.'], status_id: ['The status id must be a number.'], kategori_id: ['The kategori id must be a number.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe Updated Partially'
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: null
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: null
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: null
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: null
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: null
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: null
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: null
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: null
        get:
            summary: 'Get Detail Barang.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated Partially'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    created_at: null
                                    updated_at: '2020-12-10T15:28:18.000000Z'
                                    stasiun: { id: 4, nama: 'Lou Gutmann' }
                                    kategori: { id: 3, nama: 'Mr. Toby Fadel' }
                                    barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }]
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated Partially' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:28:18.000000Z' }
                                    stasiun: { type: object, example: { id: 4, nama: 'Lou Gutmann' } }
                                    kategori: { type: object, example: { id: 3, nama: 'Mr. Toby Fadel' } }
                                    barangimages: { type: array, example: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }], items: { type: object } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang.'
                example: 1
                required: true
                schema:
                    type: integer
    /api/v1/barang:
        post:
            summary: 'Add Barang.'
            description: 'Add barang with their status and its related field.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: '2020-12-10T15:25:46.000000Z'
                                    updated_at: null
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                                    updated_at: { type: string, example: null }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Barang'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe'
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: '67934 Juvenal Place\nJeffport, OR 75023-4991'
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: Salmon
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: Heaney-Hansen
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: 5
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: 4
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: 4
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: 3
                            required:
                                - nama_barang
                                - lokasi
                                - deskripsi
                                - warna
                                - merek
                                - user_id
                                - status_id
                                - stasiun_id
                                - kategori_id
        get:
            summary: 'Get List Barang.'
            description: "### Barang parameter query supported:\n* id\n* user_id\n* stasiun_id\n* status_id\n* kategori_id\n\n### orderBy query supported fields:\n* All field of barang detail\n\n### search query will search string inside these fields:\n* nama_barang\n* lokasi\n* tanggl\n* deskrpi\n* warna\n* merek\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: id
                    description: 'Apply filter with id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with id.'
                        example: null
                -
                    in: query
                    name: user_id
                    description: 'Apply filter with user_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with user_id.'
                        example: null
                -
                    in: query
                    name: stasiun_id
                    description: 'Apply filter with stasiun_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with stasiun_id.'
                        example: null
                -
                    in: query
                    name: status_id
                    description: 'Apply filter with status_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with status_id.'
                        example: null
                -
                    in: query
                    name: kategori_id
                    description: 'Apply filter with kategori_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with kategori_id.'
                        example: null
                -
                    in: query
                    name: orderBy
                    description: ''
                    example: '-id'
                    required: false
                    schema:
                        type: string
                        description: ''
                        example: '-id'
                -
                    in: query
                    name: search
                    description: 'Apply filtering with string search.'
                    example: '2020'
                    required: false
                    schema:
                        type: string
                        description: 'Apply filtering with string search.'
                        example: '2020'
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 5, nama_barang: 'Jolie Stroman', tanggal: '2020-12-10', lokasi: "5630 Santino Lakes Suite 696\nEast Ellenport, NC 76357-2264", warna: MediumTurquoise, merek: Klocko-Boyer, user_id: 2, status_id: 1, kategori_id: 3, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }, { id: 4, nama_barang: 'Hanna Lynch PhD', tanggal: '2020-12-10', lokasi: "52976 Delilah Island\nLednerborough, KY 35522-5757", warna: LightCoral, merek: 'Ernser, Bernhard and Deckow', user_id: 5, status_id: 3, kategori_id: 1, stasiun: { id: 4, nama: 'Minerva Hirthe' }, barangimages: [] }, { id: 3, nama_barang: 'Ms. Aaliyah Mills Sr.', tanggal: '2020-12-10', lokasi: "7241 Milton Loaf\nReichelport, AK 28866-0297", warna: PapayaWhip, merek: 'Langworth PLC', user_id: 4, status_id: 3, kategori_id: 5, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }] }, { id: 2, nama_barang: 'Letha Stracke', tanggal: '2020-12-10', lokasi: "43960 Franecki Forest Apt. 980\nShainafurt, RI 37135", warna: Snow, merek: Crooks-Schmitt, user_id: 1, status_id: 2, kategori_id: 4, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [] }, { id: 1, nama_barang: 'Ms. Cecelia Mayer I', tanggal: '2020-12-10', lokasi: "9989 Anissa Pass\nKovacekland, NE 88768-3281", warna: MediumVioletRed, merek: 'Hartmann, Reinger and Jaskolski', user_id: 5, status_id: 1, kategori_id: 5, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }]
                                    links: { first: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', last: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 5, nama_barang: 'Jolie Stroman', tanggal: '2020-12-10', lokasi: "5630 Santino Lakes Suite 696\nEast Ellenport, NC 76357-2264", warna: MediumTurquoise, merek: Klocko-Boyer, user_id: 2, status_id: 1, kategori_id: 3, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }, { id: 4, nama_barang: 'Hanna Lynch PhD', tanggal: '2020-12-10', lokasi: "52976 Delilah Island\nLednerborough, KY 35522-5757", warna: LightCoral, merek: 'Ernser, Bernhard and Deckow', user_id: 5, status_id: 3, kategori_id: 1, stasiun: { id: 4, nama: 'Minerva Hirthe' }, barangimages: [] }, { id: 3, nama_barang: 'Ms. Aaliyah Mills Sr.', tanggal: '2020-12-10', lokasi: "7241 Milton Loaf\nReichelport, AK 28866-0297", warna: PapayaWhip, merek: 'Langworth PLC', user_id: 4, status_id: 3, kategori_id: 5, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }] }, { id: 2, nama_barang: 'Letha Stracke', tanggal: '2020-12-10', lokasi: "43960 Franecki Forest Apt. 980\nShainafurt, RI 37135", warna: Snow, merek: Crooks-Schmitt, user_id: 1, status_id: 2, kategori_id: 4, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [] }, { id: 1, nama_barang: 'Ms. Cecelia Mayer I', tanggal: '2020-12-10', lokasi: "9989 Anissa Pass\nKovacekland, NE 88768-3281", warna: MediumVioletRed, merek: 'Hartmann, Reinger and Jaskolski', user_id: 5, status_id: 1, kategori_id: 5, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', last: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang?orderBy=-id&search=2020&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v1 - Barang'
    '/api/v1/barang-images/{id}':
        delete:
            summary: 'Delete Barang Image.'
            description: 'Barang image will be deleted in database and in storage.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Image'
        put:
            summary: 'Update Barang Image.'
            description: 'Update all of the field except id in barang image data.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Updated'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Updated' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Image'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar Updated'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: base64string
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image. Example 3'
                                    example: 3
                            required:
                                - nama
                                - uri
                                - barang_id
        patch:
            summary: 'Partial Update Barang Image.'
            description: 'Update some field of barang image data.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Partial Update'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Partial Update' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Image'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar Partial Update'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: null
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image.'
                                    example: 4
        get:
            summary: 'Get Detail Barang Image.'
            description: 'Returns barang image details.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Updated'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Updated' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Barang Image'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang image.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v1/barang-images:
        post:
            summary: 'Add Barang Image.'
            description: "Barang image will be uploaded in firebase storage/google cloud storage.\nAfter that, the url will be saved in database."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: 'Tas Besar'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                    id: 6
                                properties:
                                    nama: { type: string, example: 'Tas Besar' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                                    id: { type: integer, example: 6 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Barang Image'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: base64string
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image. Example 3'
                                    example: 7
                            required:
                                - nama
                                - uri
                                - barang_id
        get:
            summary: 'Get List Barang Image'
            description: "### Barang Image parameter query supported:\n* id\n* barang_id\n\n### orderBy query supported fields:\n* All field of barang image detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: id
                    description: 'Apply filter with id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with id.'
                        example: null
                -
                    in: query
                    name: barang_id
                    description: 'Apply filter with barang_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with barang_id.'
                        example: null
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }, { id: 2, nama: 'Laverne Jacobs III', uri: 'https://via.placeholder.com/640x480.png/0044ee?text=sed', barang_id: 1 }, { id: 3, nama: 'Aylin Rosenbaum', uri: 'https://via.placeholder.com/640x480.png/003322?text=quos', barang_id: 2 }, { id: 4, nama: 'Emmett Schmitt V', uri: 'https://via.placeholder.com/640x480.png/00eedd?text=quis', barang_id: 1 }, { id: 5, nama: 'Miss Queen Batz', uri: 'https://via.placeholder.com/640x480.png/00cc22?text=non', barang_id: 5 }, { id: 6, nama: 'Tas Besar', uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6', barang_id: 3 }]
                                    links: { first: 'http://localhost/api/v1/barang-images?page=1', last: 'http://localhost/api/v1/barang-images?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-images?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-images', per_page: 20, to: 6, total: 6 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }, { id: 2, nama: 'Laverne Jacobs III', uri: 'https://via.placeholder.com/640x480.png/0044ee?text=sed', barang_id: 1 }, { id: 3, nama: 'Aylin Rosenbaum', uri: 'https://via.placeholder.com/640x480.png/003322?text=quos', barang_id: 2 }, { id: 4, nama: 'Emmett Schmitt V', uri: 'https://via.placeholder.com/640x480.png/00eedd?text=quis', barang_id: 1 }, { id: 5, nama: 'Miss Queen Batz', uri: 'https://via.placeholder.com/640x480.png/00cc22?text=non', barang_id: 5 }, { id: 6, nama: 'Tas Besar', uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6', barang_id: 3 }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/barang-images?page=1', last: 'http://localhost/api/v1/barang-images?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-images?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-images', per_page: 20, to: 6, total: 6 } }
            tags:
                - 'v1 - Barang Image'
    '/api/v1/barang-kategori/{id}':
        delete:
            summary: 'Delete Barang Kategori.'
            description: 'Barang kategori can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Kategori'
        put:
            summary: 'Update Barang Kategori.'
            description: 'Barang kategori can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Aksesoris Updated'
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Aksesoris Updated' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Kategori'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama kategori.'
                                    example: 'Aksesoris Updated'
                            required:
                                - nama
        get:
            summary: 'Get Detail Barang Kategori.'
            description: 'Barang kategori detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: Aksesoris
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: Aksesoris }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Kategori'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang kategori.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v1/barang-kategori:
        post:
            summary: 'Add Barang Kategori.'
            description: 'Barang kategori can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: Aksesoris
                                    id: 6
                                properties:
                                    nama: { type: string, example: Aksesoris }
                                    id: { type: integer, example: 6 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v1 - Barang Kategori'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama kategori.'
                                    example: Aksesoris
                            required:
                                - nama
        get:
            summary: 'Get List Barang Kategori'
            description: "### orderBy query supported fields:\n* All field of barang kategori detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Mrs. Hosea Hyatt' }, { id: 2, nama: 'Isaac Jacobs' }, { id: 3, nama: 'Ben Bailey' }, { id: 4, nama: 'Lionel Hartmann I' }, { id: 5, nama: 'Mariane Eichmann' }]
                                    links: { first: 'http://localhost/api/v1/barang-kategori?page=1', last: 'http://localhost/api/v1/barang-kategori?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-kategori?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-kategori', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Mrs. Hosea Hyatt' }, { id: 2, nama: 'Isaac Jacobs' }, { id: 3, nama: 'Ben Bailey' }, { id: 4, nama: 'Lionel Hartmann I' }, { id: 5, nama: 'Mariane Eichmann' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/barang-kategori?page=1', last: 'http://localhost/api/v1/barang-kategori?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-kategori?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-kategori', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v1 - Barang Kategori'
    '/api/v1/barang-status/{id}':
        delete:
            summary: 'Delete Barang Status.'
            description: 'Barang status can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Status'
        put:
            summary: 'Update Barang Status.'
            description: 'Barang status can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    nama: dijual
                                properties:
                                    id: { type: integer, example: 4 }
                                    nama: { type: string, example: dijual }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Status'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: dijual
                            required:
                                - nama
        get:
            summary: 'Get Detail Barang Status.'
            description: 'Barang status detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    nama: ditemukan
                                properties:
                                    id: { type: integer, example: 4 }
                                    nama: { type: string, example: ditemukan }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Barang Status'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang status.'
                example: 4
                required: true
                schema:
                    type: integer
    /api/v1/barang-status:
        post:
            summary: 'Add Barang Status.'
            description: 'Barang status can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: ditemukan
                                    id: 4
                                properties:
                                    nama: { type: string, example: ditemukan }
                                    id: { type: integer, example: 4 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v1 - Barang Status'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: ditemukan
                            required:
                                - nama
        get:
            summary: 'Get List Barang Status'
            description: "### orderBy query supported fields:\n* All field of barang status detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: hilang }, { id: 2, nama: ditemukan }, { id: 3, nama: didonasikan }, { id: 4, nama: diklaim }]
                                    links: { first: 'http://localhost/api/v1/barang-status?page=1', last: 'http://localhost/api/v1/barang-status?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-status?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-status', per_page: 20, to: 4, total: 4 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: hilang }, { id: 2, nama: ditemukan }, { id: 3, nama: didonasikan }, { id: 4, nama: diklaim }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/barang-status?page=1', last: 'http://localhost/api/v1/barang-status?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/barang-status?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/barang-status', per_page: 20, to: 4, total: 4 } }
            tags:
                - 'v1 - Barang Status'
    '/api/v1/claims/{id}':
        delete:
            summary: 'Delete Claim.'
            description: "Claim can be deleted using this API.\nTicket image also deleted in storage."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Claim'
        put:
            summary: 'Update Claim.'
            description: "Claim can be updated using this API.\nClaim can be updated for barang hilang only."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    user_id: 1
                                    barang_id: 1
                                    alamat: 'Jalan Mangga, Block X/21'
                                    uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4'
                                    no_telp: '08123456789'
                                    verified: 0
                                    updated_at: '2020-12-11T12:40:49.000000Z'
                                    created_at: '2020-12-11T12:30:48.000000Z'
                                properties:
                                    id: { type: integer, example: 4 }
                                    user_id: { type: integer, example: 1 }
                                    barang_id: { type: integer, example: 1 }
                                    alamat: { type: string, example: 'Jalan Mangga, Block X/21' }
                                    uri_tiket: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4' }
                                    no_telp: { type: string, example: '08123456789' }
                                    verified: { type: integer, example: 0 }
                                    updated_at: { type: string, example: '2020-12-11T12:40:49.000000Z' }
                                    created_at: { type: string, example: '2020-12-11T12:30:48.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Claim'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                user_id:
                                    type: string
                                    description: 'id user that want to claim.'
                                    example: '1'
                                barang_id:
                                    type: integer
                                    description: 'id barang that user want to claim.'
                                    example: 1
                                alamat:
                                    type: string
                                    description: 'Alamat of user.'
                                    example: 'Jalan Mangga, Block X/21'
                                uri_tiket:
                                    type: string
                                    description: 'Ticket image of user in URI Base64 format.'
                                    example: uribase64
                                no_telp:
                                    type: string
                                    description: 'Phone number of user.'
                                    example: '08123456789'
                            required:
                                - user_id
                                - barang_id
                                - alamat
                                - uri_tiket
                                - no_telp
        patch:
            summary: 'Partial Update Claim.'
            description: "Claim can be updated using this API.\nClaim can be updated for barang hilang only."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    user_id: 1
                                    barang_id: 1
                                    alamat: 'Jalan Mangga, Block X/21'
                                    uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4'
                                    no_telp: '0999999999'
                                    verified: 0
                                    updated_at: '2020-12-11T12:40:49.000000Z'
                                    created_at: '2020-12-11T12:30:48.000000Z'
                                properties:
                                    id: { type: integer, example: 4 }
                                    user_id: { type: integer, example: 1 }
                                    barang_id: { type: integer, example: 1 }
                                    alamat: { type: string, example: 'Jalan Mangga, Block X/21' }
                                    uri_tiket: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4' }
                                    no_telp: { type: string, example: '0999999999' }
                                    verified: { type: integer, example: 0 }
                                    updated_at: { type: string, example: '2020-12-11T12:40:49.000000Z' }
                                    created_at: { type: string, example: '2020-12-11T12:30:48.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Claim'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                user_id:
                                    type: string
                                    description: 'id user that want to claim.'
                                    example: null
                                barang_id:
                                    type: integer
                                    description: 'id barang that user want to claim.'
                                    example: null
                                alamat:
                                    type: string
                                    description: 'Alamat of user. Example:'
                                    example: null
                                uri_tiket:
                                    type: string
                                    description: 'Ticket image of user in URI Base64 format.'
                                    example: null
                                no_telp:
                                    type: string
                                    description: 'Phone number of user.'
                                    example: '0999999999'
        get:
            summary: 'Detail Claim.'
            description: 'Claim detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    alamat: 'Jalan Mangga, Block X/20'
                                    no_telp: '08123456789'
                                    uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4'
                                    verified: 0
                                    created_at: '2020-12-11T12:30:48.000000Z'
                                    updated_at: '2020-12-11T12:30:49.000000Z'
                                    user_id: 1
                                    barang_id: 1
                                    barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' }
                                properties:
                                    id: { type: integer, example: 4 }
                                    alamat: { type: string, example: 'Jalan Mangga, Block X/20' }
                                    no_telp: { type: string, example: '08123456789' }
                                    uri_tiket: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4' }
                                    verified: { type: integer, example: 0 }
                                    created_at: { type: string, example: '2020-12-11T12:30:48.000000Z' }
                                    updated_at: { type: string, example: '2020-12-11T12:30:49.000000Z' }
                                    user_id: { type: integer, example: 1 }
                                    barang_id: { type: integer, example: 1 }
                                    barang: { type: object, example: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Claim'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang status.'
                example: 4
                required: true
                schema:
                    type: integer
    '/api/v1/claims/{id}/verified':
        put:
            summary: 'Verify Claim.'
            description: 'Claim can be verified by admin only using this api.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    user_id: 1
                                    barang_id: 1
                                    alamat: 'Jalan Mangga, Block X/21'
                                    uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4'
                                    no_telp: '0999999999'
                                    verified: 1
                                    updated_at: '2020-12-11T12:45:49.000000Z'
                                    created_at: '2020-12-11T12:30:48.000000Z'
                                properties:
                                    id: { type: integer, example: 4 }
                                    user_id: { type: integer, example: 1 }
                                    barang_id: { type: integer, example: 1 }
                                    alamat: { type: string, example: 'Jalan Mangga, Block X/21' }
                                    uri_tiket: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4' }
                                    no_telp: { type: string, example: '0999999999' }
                                    verified: { type: integer, example: 1 }
                                    updated_at: { type: string, example: '2020-12-11T12:45:49.000000Z' }
                                    created_at: { type: string, example: '2020-12-11T12:30:48.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { verified: ['The verified field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { verified: ['The verified field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Claim'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                verified:
                                    type: boolean
                                    description: 'id user that want to claim.'
                                    example: true
        parameters:
            -
                in: path
                name: id
                description: ''
                example: et
                required: true
                schema:
                    type: string
    /api/v1/claims:
        post:
            summary: 'Add Claim.'
            description: "Claim can be added using this API.\nClaim can be added for barang hilang only."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    user_id: 1
                                    barang_id: 1
                                    alamat: 'Jalan Mangga, Block X/20'
                                    uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4'
                                    no_telp: '08123456789'
                                    verified: 0
                                    updated_at: '2020-12-11T12:30:49.000000Z'
                                    created_at: '2020-12-11T12:30:48.000000Z'
                                    id: 4
                                properties:
                                    user_id: { type: integer, example: 1 }
                                    barang_id: { type: integer, example: 1 }
                                    alamat: { type: string, example: 'Jalan Mangga, Block X/20' }
                                    uri_tiket: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4' }
                                    no_telp: { type: string, example: '08123456789' }
                                    verified: { type: integer, example: 0 }
                                    updated_at: { type: string, example: '2020-12-11T12:30:49.000000Z' }
                                    created_at: { type: string, example: '2020-12-11T12:30:48.000000Z' }
                                    id: { type: integer, example: 4 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { user_id: ['The user id field is required.'], barang_id: ['The barang id field is required.'], alamat: ['The alamat field is required.'], uri_tiket: ['The uri tiket field is required.'], no_telp: ['The no telp field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v1 - Claim'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                user_id:
                                    type: string
                                    description: 'id user that want to claim.'
                                    example: '1'
                                barang_id:
                                    type: integer
                                    description: 'id barang that user want to claim.'
                                    example: 1
                                alamat:
                                    type: string
                                    description: 'Alamat of user.'
                                    example: 'Jalan Mangga, Block X/20'
                                uri_tiket:
                                    type: string
                                    description: 'Ticket image of user in URI Base64 format.'
                                    example: uribase64
                                no_telp:
                                    type: string
                                    description: 'Phone number of user.'
                                    example: '08123456789'
                            required:
                                - user_id
                                - barang_id
                                - alamat
                                - uri_tiket
                                - no_telp
        get:
            summary: 'Get List Claim'
            description: "### Claim parameter query supported:\n* id\n* user_id\n* verified\n* barang_id\n* no_telp\n\n### orderBy query supported fields:\n* All field of claim detail\n\n### search query will search string inside these fields:\n* alamat\n* no_telp\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:23:34.000000Z', updated_at: '2020-12-11T12:23:34.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 2, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:26:06.000000Z', updated_at: '2020-12-11T12:26:06.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 3, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:28:17.000000Z', updated_at: '2020-12-11T12:28:17.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 4, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4', verified: 0, created_at: '2020-12-11T12:30:48.000000Z', updated_at: '2020-12-11T12:30:49.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 5, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/5', verified: 0, created_at: '2020-12-11T13:18:25.000000Z', updated_at: '2020-12-11T13:18:26.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }]
                                    links: { first: 'http://localhost/api/v1/claims?page=1', last: 'http://localhost/api/v1/claims?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/claims?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/claims', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:23:34.000000Z', updated_at: '2020-12-11T12:23:34.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 2, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:26:06.000000Z', updated_at: '2020-12-11T12:26:06.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 3, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: '', verified: 0, created_at: '2020-12-11T12:28:17.000000Z', updated_at: '2020-12-11T12:28:17.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 4, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/4', verified: 0, created_at: '2020-12-11T12:30:48.000000Z', updated_at: '2020-12-11T12:30:49.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }, { id: 5, alamat: 'Jalan Mangga, Block X/20', no_telp: '08123456789', uri_tiket: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/claims/ticket_image/5', verified: 0, created_at: '2020-12-11T13:18:25.000000Z', updated_at: '2020-12-11T13:18:26.000000Z', user_id: 1, barang_id: 1, barang: { id: 1, nama_barang: 'Ms. Cecelia Mayer I' } }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/claims?page=1', last: 'http://localhost/api/v1/claims?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/claims?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/claims', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v1 - Claim'
    /api/v1/histories:
        get:
            summary: 'Display a listing of the resource.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: []
                                    links: { first: 'http://localhost/api/v1/histories?page=1', last: 'http://localhost/api/v1/histories?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: null, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/histories?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/histories', per_page: 20, to: null, total: 0 }
                                properties:
                                    data: { type: array, example: [] }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/histories?page=1', last: 'http://localhost/api/v1/histories?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: null, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/histories?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/histories', per_page: 20, to: null, total: 0 } }
            tags:
                - 'v1 - History'
    '/api/v1/stasiun/{id}':
        delete:
            summary: 'Delete Barang Stasiun.'
            description: 'Stasiun can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Stasiun'
        put:
            summary: 'Update Stasiun'
            description: 'Stasiun can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 10
                                    nama: 'Stasiun Maju'
                                properties:
                                    id: { type: integer, example: 10 }
                                    nama: { type: string, example: 'Stasiun Maju' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Stasiun'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: 'Stasiun Maju'
                            required:
                                - nama
        get:
            summary: 'Get Detail Stasiun'
            description: 'Stasiun detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 10
                                    nama: 'Stasiun Banjar'
                                properties:
                                    id: { type: integer, example: 10 }
                                    nama: { type: string, example: 'Stasiun Banjar' }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - Stasiun'
        parameters:
            -
                in: path
                name: id
                description: 'The id of stasiun.'
                example: 10
                required: true
                schema:
                    type: integer
    /api/v1/stasiun:
        post:
            summary: 'Add Stasiun'
            description: 'Stasiun can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: 'Stasiun Banjar'
                                    id: 10
                                properties:
                                    nama: { type: string, example: 'Stasiun Banjar' }
                                    id: { type: integer, example: 10 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v1 - Stasiun'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama stasiun.'
                                    example: 'Stasiun Banjar'
                            required:
                                - nama
        get:
            summary: 'Get List Stasiun'
            description: "### orderBy query supported fields:\n* All field of stasiun detail\n\n### search query will search string inside these fields:\n* nama\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Norval Goyette IV' }, { id: 2, nama: 'Dr. Abbigail Price' }, { id: 3, nama: 'Prof. Kamren Dickens DVM' }, { id: 4, nama: 'Minerva Hirthe' }, { id: 5, nama: 'Muriel Gibson' }]
                                    links: { first: 'http://localhost/api/v1/stasiun?page=1', last: 'http://localhost/api/v1/stasiun?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/stasiun?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/stasiun', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Norval Goyette IV' }, { id: 2, nama: 'Dr. Abbigail Price' }, { id: 3, nama: 'Prof. Kamren Dickens DVM' }, { id: 4, nama: 'Minerva Hirthe' }, { id: 5, nama: 'Muriel Gibson' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/stasiun?page=1', last: 'http://localhost/api/v1/stasiun?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/stasiun?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/stasiun', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v1 - Stasiun'
    '/api/v1/android/users/{id}':
        get:
            summary: 'Display the specified resource.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User (Deprecated, please use v2!)'
        put:
            summary: 'Update the specified resource in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'v1 - User (Deprecated, please use v2!)'
        patch:
            summary: 'Update partially the specified resource in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'v1 - User (Deprecated, please use v2!)'
        parameters:
            -
                in: path
                name: id
                description: ''
                example: minus
                required: true
                schema:
                    type: string
    /api/v1/android/users:
        get:
            summary: 'Display a listing of the resource.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Yoshiko Gottlieb Updated', email: katheryn42@okeefe.biz, email_verified_at: '2020-12-10T17:18:48.000000Z', image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }, { id: 2, nama: 'Tressa Kling', email: lgrimes@hodkiewicz.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ffbb?text=cum' }, { id: 3, nama: 'Trystan Bogisich', email: amalia.murray@hotmail.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff11?text=quia' }, { id: 4, nama: 'Mrs. Blanche Wisoky', email: vstanton@monahan.info, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff33?text=et' }, { id: 5, nama: 'Ms. Josie Macejkovic', email: hmonahan@bergnaum.net, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/0077aa?text=odio' }]
                                    links: { first: 'http://localhost/api/v1/android/users?page=1', last: 'http://localhost/api/v1/android/users?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/android/users?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/android/users', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Yoshiko Gottlieb Updated', email: katheryn42@okeefe.biz, email_verified_at: '2020-12-10T17:18:48.000000Z', image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }, { id: 2, nama: 'Tressa Kling', email: lgrimes@hodkiewicz.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ffbb?text=cum' }, { id: 3, nama: 'Trystan Bogisich', email: amalia.murray@hotmail.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff11?text=quia' }, { id: 4, nama: 'Mrs. Blanche Wisoky', email: vstanton@monahan.info, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff33?text=et' }, { id: 5, nama: 'Ms. Josie Macejkovic', email: hmonahan@bergnaum.net, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/0077aa?text=odio' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/android/users?page=1', last: 'http://localhost/api/v1/android/users?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/android/users?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/android/users', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v1 - User (Deprecated, please use v2!)'
    '/api/v1/web/users/{id}':
        get:
            summary: 'Get Detail Admin User.'
            description: 'Admin User detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Dr. Mathias Rohan II'
                                    nip: '4539422570508851'
                                    image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus'
                                    role: 2
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: null
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Dr. Mathias Rohan II' }
                                    nip: { type: string, example: '4539422570508851' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/008800?text=doloribus' }
                                    role: { type: integer, example: 2 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User Admin'
        put:
            summary: 'Update Admin User.'
            description: 'Admin User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"id\": 6,\n \"nama\": \"Tono\",\n \"nip\": \"SA1234567,\n \"email\": null,\n \"email_verified_at\": null,\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 2,\n \"stasiun_id\": 1,\n \"created_at\": null,\n \"updated_at\": \"2020-12-10T17:18:49.000000Z\"\n}"
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: Tono
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: SA1234567
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: uribase64
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: '1'
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: '2'
                            required:
                                - nama
                                - nip
                                - password
                                - image
        patch:
            summary: 'Partial Update Admin User.'
            description: 'Admin User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"id\": 6,\n \"nama\": \"Tono Partial Update\",\n \"nip\": \"SA1234567,\n \"email\": null,\n \"email_verified_at\": null,\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 2,\n \"stasiun_id\": 1,\n \"created_at\": null,\n \"updated_at\": \"2020-12-10T17:18:49.000000Z\"\n}"
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama must be a string.\"\n     ],\n     \"nip\": [\n         \"The nip must be a string.\"\n     ],\n     \"password\": [\n         \"The password must be a string.\"\n     ],\n     \"image\": [\n         \"The image must be a string.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User Admin'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: 'Tono Partial Update'
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: null
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: null
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: null
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: null
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: null
        delete:
            summary: 'Delete Admin User.'
            description: "Admin User can be deleted using this API.\nOnly super admin can delete admin."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User Admin'
        parameters:
            -
                in: path
                name: id
                description: 'The id of admin user.'
                example: 6
                required: true
                schema:
                    type: integer
    '/api/v1/web/users/{id}/restore':
        patch:
            summary: 'Restore Deleted Admin User.'
            description: "Deleted Admin User can be restored using this API.\nOnly super admin can restore admin."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, restore success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'User restored.'
                                properties:
                                    message: { type: string, example: 'User restored.' }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v1 - User Admin'
        parameters:
            -
                in: path
                name: id
                description: 'The id of admin user.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v1/web/users:
        get:
            summary: 'Get List Admin User'
            description: "Will returns admin list including super admin.\n\n### orderBy query supported fields:\n* All field of barang detail"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: ''
                    example: '-id'
                    required: false
                    schema:
                        type: string
                        description: ''
                        example: '-id'
                -
                    in: query
                    name: onlyTrashed
                    description: 'Retrive deleted admin user if true.'
                    example: null
                    required: false
                    schema:
                        type: string
                        description: 'Retrive deleted admin user if true.'
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 7, nama: Admin, nip: A12345, image: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/users/image/7', role: 1, stasiun_id: 1 }, { id: 6, nama: 'Dr. Mathias Rohan II', nip: '4539422570508851', image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus', role: 2, stasiun_id: null }]
                                    links: { first: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', last: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/web/users', per_page: 20, to: 2, total: 2 }
                                properties:
                                    data: { type: array, example: [{ id: 7, nama: Admin, nip: A12345, image: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/users/image/7', role: 1, stasiun_id: 1 }, { id: 6, nama: 'Dr. Mathias Rohan II', nip: '4539422570508851', image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus', role: 2, stasiun_id: null }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', last: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v1/web/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v1/web/users', per_page: 20, to: 2, total: 2 } }
            tags:
                - 'v1 - User Admin'
    /api/v2/android/auth/oauth2/google/authorize:
        get:
            summary: 'Handle Callback from Google'
            description: "_Token lifetime for user is 60*24*30 minutes (1 month)._\nYou can check token expiration time using exp field returned.\nVisit here <a href=\"https://www.epochconverter.com/\">https://www.epochconverter.com/</a>"
            parameters:
                -
                    in: query
                    name: code
                    description: 'Google auth code.'
                    example: 4%2F0AY0e-g6EBhLCybi1F4m1dCNyasrDTKVrqOQJ5T1PWefprvlq3oXh1_JqF6r2U5XT_vM7Jg
                    required: true
                    schema:
                        type: string
                        description: 'Google auth code.'
                        example: 4%2F0AY0e-g6EBhLCybi1F4m1dCNyasrDTKVrqOQJ5T1PWefprvlq3oXh1_JqF6r2U5XT_vM7Jg
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, login success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"id\": 6,\n \"nama\": \"Dr. Mathias Rohan II\",\n \"nip\": null,\n \"email\": someemail@gmail.com,\n \"email_verified_at\": \"2020-12-10T17:18:49.000000Z\",\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 0,\n \"stasiun_id\": null,\n \"created_at\": \"2020-12-10T17:18:49.000000Z\",\n \"updated_at\": null,\n \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E\",\n \"exp\": 1607737185\n}"
                201:
                    description: '201, first time login'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"nama\": \"Dr. Mathias Rohan II\",\n \"nip\": null,\n \"email\": someemail@gmail.com,\n \"email_verified_at\": \"2020-12-10T17:18:49.000000Z\",\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 0,\n \"stasiun_id\": null,\n \"created_at\": \"2020-12-10T17:18:49.000000Z\",\n \"updated_at\": null,\n \"id\": 6,\n \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E\",\n \"exp\": 1607737185\n}"
                400:
                    description: '400, token already used'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Client error: `POST https://www.googleapis.com/oauth2/v4/token` resulted in a `400 Bad Request` response:\\n{\\n  \\\"error\\\": \\\"invalid_grant\\\",\\n  \\\"error_description\\\": \\\"Bad Request\\\"\\n}\\n\",\n}"
                401:
                    description: '401, using code from other oauth2 account'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Authentication credentials are incorrect.'
                                properties:
                                    message: { type: string, example: 'Authentication credentials are incorrect.' }
            tags:
                - 'v2 - Authenticate OAuth2 User'
    /auth/oauth2/google:
        get:
            summary: 'Redirect to Google.'
            description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Session store not set on request.'
                                    class: RuntimeException
                                    trace: [{ file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\socialite\src\Two\AbstractProvider.php', line: 158, function: session, class: Illuminate\Http\Request, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\app\Http\Controllers\v2\Android\Oauth2Controller.php', line: 34, function: redirect, class: Laravel\Socialite\Two\AbstractProvider, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->', args: [redirectToGoogle, []] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 254, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, {  }, redirectToGoogle] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 197, function: runController, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 692, function: run, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 41, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php', line: 77, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\VerifyCsrfToken, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php', line: 49, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\View\Middleware\ShareErrorsFromSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php', line: 121, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php', line: 63, function: handleStatefulRequest, class: Illuminate\Session\Middleware\StartSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Session\Middleware\StartSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php', line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php', line: 67, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Cookie\Middleware\EncryptCookies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 694, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 669, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 635, function: runRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 624, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 166, function: dispatch, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 87, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fideloper\proxy\src\TrustProxies.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fideloper\Proxy\TrustProxies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 141, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 110, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [responses, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [[{  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 610, function: call, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], [], null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->', args: [[{  }, handle]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Command\Command.php', line: 255, function: execute, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 971, function: run, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 290, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 166, function: doRun, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 93, function: run, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->', args: [{  }, {  }] }]
                                properties:
                                    message: { type: string, example: 'Session store not set on request.' }
                                    class: { type: string, example: RuntimeException }
                                    trace: { type: array, example: [{ file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\socialite\src\Two\AbstractProvider.php', line: 158, function: session, class: Illuminate\Http\Request, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\app\Http\Controllers\v2\Android\Oauth2Controller.php', line: 34, function: redirect, class: Laravel\Socialite\Two\AbstractProvider, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Controller.php', line: 54, function: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php', line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->', args: [redirectToGoogle, []] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 254, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, {  }, redirectToGoogle] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Route.php', line: 197, function: runController, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 692, function: run, class: Illuminate\Routing\Route, type: '->', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php', line: 41, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php', line: 77, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\VerifyCsrfToken, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php', line: 49, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\View\Middleware\ShareErrorsFromSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php', line: 121, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php', line: 63, function: handleStatefulRequest, class: Illuminate\Session\Middleware\StartSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Session\Middleware\StartSession, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php', line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php', line: 67, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Cookie\Middleware\EncryptCookies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 694, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 669, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 635, function: runRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Routing\Router.php', line: 624, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 166, function: dispatch, class: Illuminate\Routing\Router, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php', line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php', line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php', line: 87, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fruitcake\laravel-cors\src\HandleCors.php', line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\fideloper\proxy\src\TrustProxies.php', line: 57, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 167, function: handle, class: Fideloper\Proxy\TrustProxies, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php', line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 141, function: then, class: Illuminate\Pipeline\Pipeline, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php', line: 110, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ attributes: {  }, request: {  }, query: {  }, server: {  }, files: {  }, cookies: {  }, headers: {  } }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php', line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [responses, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [], responses: [] }, [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Extracting\Generator.php', line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ name: App\Http\Controllers\v2\Android\Oauth2Controller }, { name: redirectToGoogle, class: App\Http\Controllers\v2\Android\Oauth2Controller }, { uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }, { id: b01e20f5a473dbc3c22bccd59c6da22d, methods: [GET], uri: auth/oauth2/google, metadata: { groupName: 'v2 - Authenticate OAuth2 User', groupDescription: '', title: 'Redirect to Google.', description: "User can login using google authorization.\n\nThis will redirect user to Google and signin there.\nThis is for web only. You must implement yourself in mobile.", authenticated: true }, urlParameters: [], cleanUrlParameters: [], boundUri: auth/oauth2/google, auth: 'headers.Authorization.Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc2MDY3ODcsImV4cCI6MTYxMDE5ODc4NywibmJmIjoxNjA3NjA2Nzg3LCJqdGkiOiJtME45NGtocDI0T2VGMXNDIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.ej0YJMNMf3-z9apdeaOFjBN30m7jdkh7gjqn3bQLl40', headers: { Authorization: 'Bearer {YOUR_AUTH_KEY}', Content-Type: application/json, Accept: application/json }, queryParameters: [], cleanQueryParameters: [], bodyParameters: [], cleanBodyParameters: [], fileParameters: [] }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->', args: [{ uri: auth/oauth2/google, methods: [GET, HEAD], action: { middleware: [web], uses: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, controller: App\Http\Controllers\v2\Android\Oauth2Controller@redirectToGoogle, namespace: null, prefix: null, where: [] }, isFallback: false, controller: {  }, defaults: [], wheres: [], parameters: [], parameterNames: [], computedMiddleware: [web], compiled: {  } }, { headers: { Content-Type: application/json, Accept: application/json }, response_calls: { methods: [GET], config: { app.env: documentation }, queryParams: [], bodyParams: [], fileParams: [], cookies: [] } }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php', line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [[{  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }, {  }]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Util.php', line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::', args: [] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::', args: [{  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php', line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Container\Container.php', line: 610, function: call, class: Illuminate\Container\BoundMethod, type: '::', args: [{ contextual: [] }, [{  }, handle], [], null] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 136, function: call, class: Illuminate\Container\Container, type: '->', args: [[{  }, handle]] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Command\Command.php', line: 255, function: execute, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Command.php', line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 971, function: run, class: Illuminate\Console\Command, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 290, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\symfony\console\Application.php', line: 166, function: doRun, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Console\Application.php', line: 93, function: run, class: Symfony\Component\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php', line: 129, function: run, class: Illuminate\Console\Application, type: '->', args: [{  }, {  }] }, { file: 'D:\Megabit\LostnFound_Backend\lost_n_found\artisan', line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->', args: [{  }, {  }] }], items: { type: object } }
            tags:
                - 'v2 - Authenticate OAuth2 User'
    /api/v2/android/auth/login:
        post:
            summary: 'Login User.'
            description: "User can login using this API.\n\n_Token lifetime for user is 60*24*30 minutes (1 month)._\nYou can check token expiration time using exp field returned.\nVisit here <a href=\"https://www.epochconverter.com/\">https://www.epochconverter.com/</a>"
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Dr. Mathias Rohan II'
                                    nip: null
                                    email: fake@email.com
                                    email_verified_at: '2020-12-10T17:18:49.000000Z'
                                    image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus'
                                    role: 0
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: null
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwPlwvXC9sv2NhbGhvc3Q6ODAwMFwvYXBpXC92MlwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc3MzYyNTYsImV4cCI6MTYxMDMyODI1NiwibmJmIjoxNjA3NzM2MjU2LCJqdGkiOiI5QlpjQ1lHZjlLdFdCcDhVIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0._oVDa85ail2G-A5t2NWiKt0APMkr3yl0TbbdMjZNOMg
                                    exp: 1610328256
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Dr. Mathias Rohan II' }
                                    nip: { type: string, example: null }
                                    email: { type: string, example: fake@email.com }
                                    email_verified_at: { type: string, example: '2020-12-10T17:18:49.000000Z' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/008800?text=doloribus' }
                                    role: { type: integer, example: 0 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwPlwvXC9sv2NhbGhvc3Q6ODAwMFwvYXBpXC92MlwvYW5kcm9pZFwvYXV0aFwvbG9naW4iLCJpYXQiOjE2MDc3MzYyNTYsImV4cCI6MTYxMDMyODI1NiwibmJmIjoxNjA3NzM2MjU2LCJqdGkiOiI5QlpjQ1lHZjlLdFdCcDhVIiwic3ViIjo2LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0._oVDa85ail2G-A5t2NWiKt0APMkr3yl0TbbdMjZNOMg }
                                    exp: { type: integer, example: 1610328256 }
                202:
                    description: '202, not verify email'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Verify your email first, we have send you an email.'
                                properties:
                                    message: { type: string, example: 'Verify your email first, we have send you an email.' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { email: ['The email field is required.'], password: ['The password field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { email: ['The email field is required.'], password: ['The password field is required.'] } }
                401:
                    description: '401, login failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Authentication credentials were missing or incorrect'
                                properties:
                                    message: { type: string, example: 'Authentication credentials were missing or incorrect' }
            tags:
                - 'v2 - Authenticate User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'Email user.'
                                    example: fake@email.com
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                            required:
                                - email
                                - password
            security: []
    /api/v2/android/auth/register:
        post:
            summary: 'Register User.'
            description: "User can be registered by super admin using this API.\n\n_Token only last for 30 minutes in user email._"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                202:
                    description: '202, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Check your email to complete registration.'
                                properties:
                                    message: { type: string, example: 'Check your email to complete registration.' }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"email\": [\n         \"The email field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, login failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Authentication credentials were missing or incorrect'
                                properties:
                                    message: { type: string, example: 'Authentication credentials were missing or incorrect' }
            tags:
                - 'v2 - Authenticate User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: User
                                email:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: fake@@email.com
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: uribase64
                            required:
                                - nama
                                - email
                                - password
                                - image
    /api/v2/android/auth/logout:
        get:
            summary: 'Logout User'
            description: 'When logout authenticated token will not work anymore.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n message\": \"successfully logout\"\n}"
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User'
    /api/v2/android/auth/refresh:
        get:
            summary: 'Refresh token'
            description: "Authenticated token can be refreshed to extend its lifetime before it's expired.\nRecommend: 3 days before it's expired"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM
                                    exp: 1607738546
                                properties:
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM }
                                    exp: { type: integer, example: 1607738546 }
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User'
    '/api/v2/android/auth/verify/{token}':
        get:
            summary: 'Verify email.'
            description: "When an user get verification email and click it, the link will call this API,\nand verify his email.\n\n<aside class=\"notice\">\nThe response that user see is only text though.\nYou can give backend custom page if you want to change it.\n</aside>"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, verification success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Email verified successfully.'
                                properties:
                                    message: { type: string, example: 'Email verified successfully.' }
                401:
                    description: '401, verification failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User'
        parameters:
            -
                in: path
                name: token
                description: 'Verification token (jwt).'
                example: null
                required: true
                schema:
                    type: string
    /api/v2/android/auth/reset-password:
        post:
            summary: 'Forget password.'
            description: "Sometimes user can forget his password. Use this API to allow him reset his password.\n\n<aside class=\"notice\">\nYou can give backend custom page if you want to change the reset page form.\n</aside>"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, email verification sent'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Check your email.'
                                properties:
                                    message: { type: string, example: 'Check your email.' }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"email\": [\n         \"The email field is required.\"\n     ]\n}"
            tags:
                - 'v2 - Authenticate User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'User email.'
                                    example: null
                            required:
                                - email
    '/api/v2/android/auth/reset-password/{token}':
        get:
            summary: 'Reset password (external).'
            description: 'This is what user see after user click the reset password link from his email.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                405:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The GET method is not supported for this route. Supported methods: POST.'
                                properties:
                                    message: { type: string, example: 'The GET method is not supported for this route. Supported methods: POST.' }
            tags:
                - 'v2 - Authenticate User'
        post:
            summary: 'Reset password (internal).'
            description: 'This is used internally after user click the reset password link from his email.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, verification success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Password updated successfully.'
                                properties:
                                    message: { type: string, example: 'Password updated successfully.' }
                401:
                    description: '401, verification failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                password:
                                    type: string
                                    description: 'New password.'
                                    example: null
                            required:
                                - password
        parameters:
            -
                in: path
                name: token
                description: 'Verification token (jwt).'
                example: null
                required: true
                schema:
                    type: string
    /api/v2/web/auth/login:
        post:
            summary: 'Login Admin User.'
            description: "Admin/super admin user can login using this API.\n\n_Token lifetime for admin is 60 minutes._\nYou can check token expiration time using exp field returned.\nVisit here <a href=\"https://www.epochconverter.com/\">https://www.epochconverter.com/</a>"
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Dr. Mathias Rohan II'
                                    nip: '4539422570508851'
                                    email: null
                                    email_verified_at: null
                                    image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus'
                                    role: 2
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: null
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E
                                    exp: 1607737185
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Dr. Mathias Rohan II' }
                                    nip: { type: string, example: '4539422570508851' }
                                    email: { type: string, example: null }
                                    email_verified_at: { type: string, example: null }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/008800?text=doloribus' }
                                    role: { type: integer, example: 2 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzczMzU4NSwiZXhwIjoxNjA3NzM3MTg1LCJuYmYiOjE2MDc3MzM1ODUsImp0aSI6ImMzOE5PamNxQUpsQmtFd0UiLCJzdWIiOjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.JpDgBWIhpY3O3BubirPIIhcvbk-1QJ3epw7MGpbva8E }
                                    exp: { type: integer, example: 1607737185 }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ]\n }"
                401:
                    description: '401, login failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Authentication credentials were missing or incorrect'
                                properties:
                                    message: { type: string, example: 'Authentication credentials were missing or incorrect' }
            tags:
                - 'v2 - Authenticate User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: '4539422570508851'
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                            required:
                                - nip
                                - password
            security: []
    /api/v2/web/auth/register:
        post:
            summary: 'Register Admin User.'
            description: 'Admin/super admin user can be registered by super admin using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: Admin
                                    nip: A12345
                                    image: 'https://some-url-to-image'
                                    stasiun_id: 1
                                    role: 1
                                    updated_at: '2020-12-12T00:54:24.000000Z'
                                    created_at: '2020-12-12T00:54:21.000000Z'
                                    id: 7
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWdpc3RlciIsImlhdCI6MTYwNzczNDQ2NCwiZXhwIjoxNjA3NzM4MDY0LCJuYmYiOjE2MDc3MzQ0NjQsImp0aSI6InBvamVxZWM2WFM5Z2lxMmwiLCJzdWIiOjcsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.wJrfZSmEEappLwT3nQHLq70y6ceAubIo8uI50amQp64
                                    exp: 1607738064
                                properties:
                                    nama: { type: string, example: Admin }
                                    nip: { type: string, example: A12345 }
                                    image: { type: string, example: 'https://some-url-to-image' }
                                    stasiun_id: { type: integer, example: 1 }
                                    role: { type: integer, example: 1 }
                                    updated_at: { type: string, example: '2020-12-12T00:54:24.000000Z' }
                                    created_at: { type: string, example: '2020-12-12T00:54:21.000000Z' }
                                    id: { type: integer, example: 7 }
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWdpc3RlciIsImlhdCI6MTYwNzczNDQ2NCwiZXhwIjoxNjA3NzM4MDY0LCJuYmYiOjE2MDc3MzQ0NjQsImp0aSI6InBvamVxZWM2WFM5Z2lxMmwiLCJzdWIiOjcsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.wJrfZSmEEappLwT3nQHLq70y6ceAubIo8uI50amQp64 }
                                    exp: { type: integer, example: 1607738064 }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
            tags:
                - 'v2 - Authenticate User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: Admin
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: A12345
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: uribase64
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: '1'
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: '1'
                            required:
                                - nama
                                - nip
                                - password
                                - image
    /api/v2/web/auth/logout:
        get:
            summary: 'Logout Admin User'
            description: 'When logout authenticated token will not work anymore.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n message\": \"successfully logout\"\n}"
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User Admin'
    /api/v2/web/auth/refresh:
        get:
            summary: 'Refresh token'
            description: "Authenticated token can be refreshed to extend its lifetime before it's expired.\nRecommend: 15 minutes before it's expired"
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM
                                    exp: 1607738546
                                properties:
                                    token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvd2ViXC9hdXRoXC9yZWZyZXNoIiwiaWF0IjoxNjA3NjEzMjIzLCJleHAiOjE2MDc3Mzg1NDYsIm5iZiI6MTYwNzczNDk0NiwianRpIjoicDVueGl4M3o3TG56bkVrRyIsInN1YiI6NiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.-3IOo1c1Flt-bbHPT5DMuanWn_BwMOENYemhsPSzXdM }
                                    exp: { type: integer, example: 1607738546 }
                401:
                    description: '401, failed'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'The token has been blacklisted'
                                properties:
                                    message: { type: string, example: 'The token has been blacklisted' }
            tags:
                - 'v2 - Authenticate User Admin'
    '/api/v2/barang/{id}':
        delete:
            summary: 'Delete Barang.'
            description: 'Will delete barang and all of its images.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang'
        put:
            summary: 'Update Barang.'
            description: 'Will update barang.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, update success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: null
                                    updated_at: '2020-12-10T15:25:46.000000Z'
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'], tanggal: ['The tanggal field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang field is required.'], lokasi: ['The lokasi field is required.'], deskripsi: ['The deskripsi field is required.'], warna: ['The warna field is required.'], merek: ['The merek field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'], tanggal: ['The tanggal field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe Updated Partially'
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: 5
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: 4
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: 4
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: 3
                                tanggal:
                                    type: 'date_format:Y-m-d'
                                    description: 'Tanggal pendataan.'
                                    example: '2020-12-04'
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: Salmon
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: Heaney-Hansen
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: '67934 Juvenal Place\nJeffport, OR 75023-4991'
                            required:
                                - nama_barang
                                - deskripsi
                                - user_id
                                - status_id
                                - stasiun_id
                                - kategori_id
                                - tanggal
        patch:
            summary: 'Partial Update Barang.'
            description: 'Will update barang partially.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, update success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated Partially'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: null
                                    updated_at: '2020-12-10T15:25:46.000000Z'
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated Partially' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang must be a string.'], lokasi: ['The lokasi must be a string.'], deskripsi: ['The deskripsi must be a string.'], warna: ['The warna must be a string.'], merek: ['The merek must be a string.'], user_id: ['The user id must be a number.'], stasiun_id: ['The stasiun id must be a number.'], status_id: ['The status id must be a number.'], kategori_id: ['The kategori id must be a number.'], tanggal: ['The tanggal does not match the format Y-m-d.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang must be a string.'], lokasi: ['The lokasi must be a string.'], deskripsi: ['The deskripsi must be a string.'], warna: ['The warna must be a string.'], merek: ['The merek must be a string.'], user_id: ['The user id must be a number.'], stasiun_id: ['The stasiun id must be a number.'], status_id: ['The status id must be a number.'], kategori_id: ['The kategori id must be a number.'], tanggal: ['The tanggal does not match the format Y-m-d.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe Updated Partially'
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: null
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: null
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: null
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: null
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: null
                                tanggal:
                                    type: 'date_format:Y-m-d'
                                    description: 'Tanggal pendataan.'
                                    example: null
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: null
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: null
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: null
        get:
            summary: 'Get Detail Barang.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe Updated Partially'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    created_at: null
                                    updated_at: '2020-12-10T15:28:18.000000Z'
                                    stasiun: { id: 4, nama: 'Lou Gutmann' }
                                    kategori: { id: 3, nama: 'Mr. Toby Fadel' }
                                    barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }]
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe Updated Partially' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-10T15:28:18.000000Z' }
                                    stasiun: { type: object, example: { id: 4, nama: 'Lou Gutmann' } }
                                    kategori: { type: object, example: { id: 3, nama: 'Mr. Toby Fadel' } }
                                    barangimages: { type: array, example: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }], items: { type: object } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang.'
                example: 1
                required: true
                schema:
                    type: integer
    /api/v2/barang:
        post:
            summary: 'Add Barang.'
            description: 'Add barang with their status and its related field.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 3
                                    nama_barang: 'Clair Rowe'
                                    tanggal: '2020-12-04'
                                    lokasi: "67934 Juvenal Place\nJeffport, OR 75023-4991"
                                    deskripsi: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                    warna: Salmon
                                    merek: Heaney-Hansen
                                    user_id: 5
                                    status_id: 4
                                    stasiun_id: 4
                                    kategori_id: 3
                                    created_at: '2020-12-10T15:25:46.000000Z'
                                    updated_at: null
                                properties:
                                    id: { type: integer, example: 3 }
                                    nama_barang: { type: string, example: 'Clair Rowe' }
                                    tanggal: { type: string, example: '2020-12-04' }
                                    lokasi: { type: string, example: "67934 Juvenal Place\nJeffport, OR 75023-4991" }
                                    deskripsi: { type: string, example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.' }
                                    warna: { type: string, example: Salmon }
                                    merek: { type: string, example: Heaney-Hansen }
                                    user_id: { type: integer, example: 5 }
                                    status_id: { type: integer, example: 4 }
                                    stasiun_id: { type: integer, example: 4 }
                                    kategori_id: { type: integer, example: 3 }
                                    created_at: { type: string, example: '2020-12-10T15:25:46.000000Z' }
                                    updated_at: { type: string, example: null }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama_barang: ['The nama barang field is required.'], deskripsi: ['The deskripsi field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'], tanggal: ['The tanggal field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama_barang: ['The nama barang field is required.'], deskripsi: ['The deskripsi field is required.'], user_id: ['The user id field is required.'], stasiun_id: ['The stasiun id field is required.'], status_id: ['The status id field is required.'], kategori_id: ['The kategori id field is required.'], tanggal: ['The tanggal field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v2 - Barang'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama_barang:
                                    type: string
                                    description: 'Nama barang.'
                                    example: 'Clair Rowe'
                                deskripsi:
                                    type: string
                                    description: 'Deskripsi barang.'
                                    example: 'Fuga molestiae minus ullam reprehenderit. Sunt accusantium nam qui esse qui optio. Dolorum qui qui aut ut voluptatum fuga et. Rem vitae similique eius sed.'
                                user_id:
                                    type: integer
                                    description: 'id User yang terkait barang.'
                                    example: 5
                                status_id:
                                    type: integer
                                    description: 'id Status barang.'
                                    example: 4
                                stasiun_id:
                                    type: integer
                                    description: 'id Stasiun barang.'
                                    example: 4
                                kategori_id:
                                    type: integer
                                    description: 'id Kategori barang.'
                                    example: 3
                                tanggal:
                                    type: 'date_format:Y-m-d'
                                    description: 'Tanggal pendataan.'
                                    example: '2020-12-04'
                                warna:
                                    type: string
                                    description: 'Warna barang.'
                                    example: Salmon
                                merek:
                                    type: string
                                    description: 'Merek barang.'
                                    example: Heaney-Hansen
                                lokasi:
                                    type: string
                                    description: 'Lokasi detail barang.'
                                    example: '67934 Juvenal Place\nJeffport, OR 75023-4991'
                            required:
                                - nama_barang
                                - deskripsi
                                - user_id
                                - status_id
                                - stasiun_id
                                - kategori_id
                                - tanggal
        get:
            summary: 'Get List Barang.'
            description: "### Barang parameter query supported:\n* id\n* user_id\n* stasiun_id\n* status_id\n* kategori_id\n\n### orderBy query supported fields:\n* All field of barang detail\n\n### search query will search string inside these fields:\n* nama_barang\n* lokasi\n* tanggl\n* deskrpi\n* warna\n* merek\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: id
                    description: 'Apply filter with id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with id.'
                        example: null
                -
                    in: query
                    name: user_id
                    description: 'Apply filter with user_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with user_id.'
                        example: null
                -
                    in: query
                    name: stasiun_id
                    description: 'Apply filter with stasiun_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with stasiun_id.'
                        example: null
                -
                    in: query
                    name: status_id
                    description: 'Apply filter with status_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with status_id.'
                        example: null
                -
                    in: query
                    name: kategori_id
                    description: 'Apply filter with kategori_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with kategori_id.'
                        example: null
                -
                    in: query
                    name: orderBy
                    description: ''
                    example: '-id'
                    required: false
                    schema:
                        type: string
                        description: ''
                        example: '-id'
                -
                    in: query
                    name: search
                    description: 'Apply filtering with string search.'
                    example: '2020'
                    required: false
                    schema:
                        type: string
                        description: 'Apply filtering with string search.'
                        example: '2020'
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 5, nama_barang: 'Jolie Stroman', tanggal: '2020-12-10', lokasi: "5630 Santino Lakes Suite 696\nEast Ellenport, NC 76357-2264", warna: MediumTurquoise, merek: Klocko-Boyer, user_id: 2, status_id: 1, kategori_id: 3, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }, { id: 4, nama_barang: 'Hanna Lynch PhD', tanggal: '2020-12-10', lokasi: "52976 Delilah Island\nLednerborough, KY 35522-5757", warna: LightCoral, merek: 'Ernser, Bernhard and Deckow', user_id: 5, status_id: 3, kategori_id: 1, stasiun: { id: 4, nama: 'Minerva Hirthe' }, barangimages: [] }, { id: 3, nama_barang: 'Ms. Aaliyah Mills Sr.', tanggal: '2020-12-10', lokasi: "7241 Milton Loaf\nReichelport, AK 28866-0297", warna: PapayaWhip, merek: 'Langworth PLC', user_id: 4, status_id: 3, kategori_id: 5, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }] }, { id: 2, nama_barang: 'Letha Stracke', tanggal: '2020-12-10', lokasi: "43960 Franecki Forest Apt. 980\nShainafurt, RI 37135", warna: Snow, merek: Crooks-Schmitt, user_id: 1, status_id: 2, kategori_id: 4, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [] }, { id: 1, nama_barang: 'Ms. Cecelia Mayer I', tanggal: '2020-12-10', lokasi: "9989 Anissa Pass\nKovacekland, NE 88768-3281", warna: MediumVioletRed, merek: 'Hartmann, Reinger and Jaskolski', user_id: 5, status_id: 1, kategori_id: 5, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }]
                                    links: { first: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', last: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 5, nama_barang: 'Jolie Stroman', tanggal: '2020-12-10', lokasi: "5630 Santino Lakes Suite 696\nEast Ellenport, NC 76357-2264", warna: MediumTurquoise, merek: Klocko-Boyer, user_id: 2, status_id: 1, kategori_id: 3, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }, { id: 4, nama_barang: 'Hanna Lynch PhD', tanggal: '2020-12-10', lokasi: "52976 Delilah Island\nLednerborough, KY 35522-5757", warna: LightCoral, merek: 'Ernser, Bernhard and Deckow', user_id: 5, status_id: 3, kategori_id: 1, stasiun: { id: 4, nama: 'Minerva Hirthe' }, barangimages: [] }, { id: 3, nama_barang: 'Ms. Aaliyah Mills Sr.', tanggal: '2020-12-10', lokasi: "7241 Milton Loaf\nReichelport, AK 28866-0297", warna: PapayaWhip, merek: 'Langworth PLC', user_id: 4, status_id: 3, kategori_id: 5, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }] }, { id: 2, nama_barang: 'Letha Stracke', tanggal: '2020-12-10', lokasi: "43960 Franecki Forest Apt. 980\nShainafurt, RI 37135", warna: Snow, merek: Crooks-Schmitt, user_id: 1, status_id: 2, kategori_id: 4, stasiun: { id: 2, nama: 'Dr. Abbigail Price' }, barangimages: [] }, { id: 1, nama_barang: 'Ms. Cecelia Mayer I', tanggal: '2020-12-10', lokasi: "9989 Anissa Pass\nKovacekland, NE 88768-3281", warna: MediumVioletRed, merek: 'Hartmann, Reinger and Jaskolski', user_id: 5, status_id: 1, kategori_id: 5, stasiun: { id: 5, nama: 'Muriel Gibson' }, barangimages: [] }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', last: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang?orderBy=-id&search=2020&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v2 - Barang'
    '/api/v2/barang-images/{id}':
        delete:
            summary: 'Delete Barang Image.'
            description: 'Barang image will be deleted in database and in storage.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, barang not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Image'
        put:
            summary: 'Update Barang Image.'
            description: 'Update all of the field except id in barang image data.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Updated'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Updated' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Image'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar Updated'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: base64string
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image. Example 3'
                                    example: 14
                            required:
                                - nama
                                - uri
                                - barang_id
        patch:
            summary: 'Partial Update Barang Image.'
            description: 'Update some field of barang image data.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Partial Update'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Partial Update' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be the owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be the owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Image'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar Partial Update'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: null
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image.'
                                    example: 13
        get:
            summary: 'Get Detail Barang Image.'
            description: 'Returns barang image details.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Tas Besar Updated'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Tas Besar Updated' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v2 - Barang Image'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang image.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v2/barang-images:
        post:
            summary: 'Add Barang Image.'
            description: "Barang image will be uploaded in firebase storage/google cloud storage.\nAfter that, the url will be saved in database."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: 'Tas Besar'
                                    uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6'
                                    barang_id: 3
                                    id: 6
                                properties:
                                    nama: { type: string, example: 'Tas Besar' }
                                    uri: { type: string, example: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6' }
                                    barang_id: { type: integer, example: 3 }
                                    id: { type: integer, example: 6 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'], uri: ['The uri field is required.'], barang_id: ['The barang id field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
            tags:
                - 'v2 - Barang Image'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama image.'
                                    example: 'Tas Besar'
                                uri:
                                    type: string
                                    description: 'URI Base64 image.'
                                    example: base64string
                                barang_id:
                                    type: integer
                                    description: 'id Barang that owned this image. Example 3'
                                    example: 5
                            required:
                                - nama
                                - uri
                                - barang_id
        get:
            summary: 'Get List Barang Image'
            description: "### Barang Image parameter query supported:\n* id\n* barang_id\n\n### orderBy query supported fields:\n* All field of barang image detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: id
                    description: 'Apply filter with id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with id.'
                        example: null
                -
                    in: query
                    name: barang_id
                    description: 'Apply filter with barang_id.'
                    example: null
                    required: false
                    schema:
                        type: integer
                        description: 'Apply filter with barang_id.'
                        example: null
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }, { id: 2, nama: 'Laverne Jacobs III', uri: 'https://via.placeholder.com/640x480.png/0044ee?text=sed', barang_id: 1 }, { id: 3, nama: 'Aylin Rosenbaum', uri: 'https://via.placeholder.com/640x480.png/003322?text=quos', barang_id: 2 }, { id: 4, nama: 'Emmett Schmitt V', uri: 'https://via.placeholder.com/640x480.png/00eedd?text=quis', barang_id: 1 }, { id: 5, nama: 'Miss Queen Batz', uri: 'https://via.placeholder.com/640x480.png/00cc22?text=non', barang_id: 5 }, { id: 6, nama: 'Tas Besar', uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6', barang_id: 3 }]
                                    links: { first: 'http://localhost/api/v2/barang-images?page=1', last: 'http://localhost/api/v2/barang-images?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-images?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-images', per_page: 20, to: 6, total: 6 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Teresa Hettinger', uri: 'https://via.placeholder.com/640x480.png/00cc66?text=tenetur', barang_id: 3 }, { id: 2, nama: 'Laverne Jacobs III', uri: 'https://via.placeholder.com/640x480.png/0044ee?text=sed', barang_id: 1 }, { id: 3, nama: 'Aylin Rosenbaum', uri: 'https://via.placeholder.com/640x480.png/003322?text=quos', barang_id: 2 }, { id: 4, nama: 'Emmett Schmitt V', uri: 'https://via.placeholder.com/640x480.png/00eedd?text=quis', barang_id: 1 }, { id: 5, nama: 'Miss Queen Batz', uri: 'https://via.placeholder.com/640x480.png/00cc22?text=non', barang_id: 5 }, { id: 6, nama: 'Tas Besar', uri: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/barangs/image/6', barang_id: 3 }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/barang-images?page=1', last: 'http://localhost/api/v2/barang-images?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-images?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-images', per_page: 20, to: 6, total: 6 } }
            tags:
                - 'v2 - Barang Image'
    '/api/v2/barang-kategori/{id}':
        delete:
            summary: 'Delete Barang Kategori.'
            description: 'Barang kategori can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Kategori'
        put:
            summary: 'Update Barang Kategori.'
            description: 'Barang kategori can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Aksesoris Updated'
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Aksesoris Updated' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Kategori'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama kategori.'
                                    example: 'Aksesoris Updated'
                            required:
                                - nama
        get:
            summary: 'Get Detail Barang Kategori.'
            description: 'Barang kategori detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: Aksesoris
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: Aksesoris }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Kategori'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang kategori.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v2/barang-kategori:
        post:
            summary: 'Add Barang Kategori.'
            description: 'Barang kategori can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: Aksesoris
                                    id: 6
                                properties:
                                    nama: { type: string, example: Aksesoris }
                                    id: { type: integer, example: 6 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v2 - Barang Kategori'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama kategori.'
                                    example: Aksesoris
                            required:
                                - nama
        get:
            summary: 'Get List Barang Kategori'
            description: "### orderBy query supported fields:\n* All field of barang kategori detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Mrs. Hosea Hyatt' }, { id: 2, nama: 'Isaac Jacobs' }, { id: 3, nama: 'Ben Bailey' }, { id: 4, nama: 'Lionel Hartmann I' }, { id: 5, nama: 'Mariane Eichmann' }]
                                    links: { first: 'http://localhost/api/v2/barang-kategori?page=1', last: 'http://localhost/api/v2/barang-kategori?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-kategori?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-kategori', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Mrs. Hosea Hyatt' }, { id: 2, nama: 'Isaac Jacobs' }, { id: 3, nama: 'Ben Bailey' }, { id: 4, nama: 'Lionel Hartmann I' }, { id: 5, nama: 'Mariane Eichmann' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/barang-kategori?page=1', last: 'http://localhost/api/v2/barang-kategori?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-kategori?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-kategori', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v2 - Barang Kategori'
    '/api/v2/barang-status/{id}':
        delete:
            summary: 'Delete Barang Status.'
            description: 'Barang status can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Status'
        put:
            summary: 'Update Barang Status.'
            description: 'Barang status can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    nama: dijual
                                properties:
                                    id: { type: integer, example: 4 }
                                    nama: { type: string, example: dijual }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Status'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: dijual
                            required:
                                - nama
        get:
            summary: 'Get Detail Barang Status.'
            description: 'Barang status detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 4
                                    nama: ditemukan
                                properties:
                                    id: { type: integer, example: 4 }
                                    nama: { type: string, example: ditemukan }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Barang Status'
        parameters:
            -
                in: path
                name: id
                description: 'The id of barang status.'
                example: 4
                required: true
                schema:
                    type: integer
    /api/v2/barang-status:
        post:
            summary: 'Add Barang Status.'
            description: 'Barang status can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: ditemukan
                                    id: 4
                                properties:
                                    nama: { type: string, example: ditemukan }
                                    id: { type: integer, example: 4 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v2 - Barang Status'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: ditemukan
                            required:
                                - nama
        get:
            summary: 'Get List Barang Status'
            description: "### orderBy query supported fields:\n* All field of barang status detail\n\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: hilang }, { id: 2, nama: ditemukan }, { id: 3, nama: didonasikan }, { id: 4, nama: diklaim }]
                                    links: { first: 'http://localhost/api/v2/barang-status?page=1', last: 'http://localhost/api/v2/barang-status?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-status?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-status', per_page: 20, to: 4, total: 4 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: hilang }, { id: 2, nama: ditemukan }, { id: 3, nama: didonasikan }, { id: 4, nama: diklaim }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/barang-status?page=1', last: 'http://localhost/api/v2/barang-status?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/barang-status?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/barang-status', per_page: 20, to: 4, total: 4 } }
            tags:
                - 'v2 - Barang Status'
    '/api/v2/stasiun/{id}':
        delete:
            summary: 'Delete Barang Stasiun.'
            description: 'Stasiun can be deleted using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Stasiun'
        put:
            summary: 'Update Stasiun'
            description: 'Stasiun can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 10
                                    nama: 'Stasiun Maju'
                                properties:
                                    id: { type: integer, example: 10 }
                                    nama: { type: string, example: 'Stasiun Maju' }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Stasiun'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama status.'
                                    example: 'Stasiun Maju'
                            required:
                                - nama
        get:
            summary: 'Get Detail Stasiun'
            description: 'Stasiun detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 10
                                    nama: 'Stasiun Banjar'
                                properties:
                                    id: { type: integer, example: 10 }
                                    nama: { type: string, example: 'Stasiun Banjar' }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - Stasiun'
        parameters:
            -
                in: path
                name: id
                description: 'The id of stasiun.'
                example: 10
                required: true
                schema:
                    type: integer
    /api/v2/stasiun:
        post:
            summary: 'Add Stasiun'
            description: 'Stasiun can be added using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    nama: 'Stasiun Banjar'
                                    id: 10
                                properties:
                                    nama: { type: string, example: 'Stasiun Banjar' }
                                    id: { type: integer, example: 10 }
                400:
                    description: '400, bad request'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Validation Error'
                                    errors: { nama: ['The nama field is required.'] }
                                properties:
                                    message: { type: string, example: 'Validation Error' }
                                    errors: { type: object, example: { nama: ['The nama field is required.'] } }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
            tags:
                - 'v2 - Stasiun'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Nama stasiun.'
                                    example: 'Stasiun Banjar'
                            required:
                                - nama
        get:
            summary: 'Get List Stasiun'
            description: "### orderBy query supported fields:\n* All field of stasiun detail\n\n### search query will search string inside these fields:\n* nama\n<aside class=\"warning\"> We still use limit offset pagination. In future will be replaced with cursor based pagination.</aside>"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                    example: null
                    required: false
                    schema:
                        type: string
                        description: "Apply ordering based on specific field.\n             Usage: <b>-id</b> orderBy id (descending); <b>id</b> orderBy id (ascending)."
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, nama: 'Norval Goyette IV' }, { id: 2, nama: 'Dr. Abbigail Price' }, { id: 3, nama: 'Prof. Kamren Dickens DVM' }, { id: 4, nama: 'Minerva Hirthe' }, { id: 5, nama: 'Muriel Gibson' }]
                                    links: { first: 'http://localhost/api/v2/stasiun?page=1', last: 'http://localhost/api/v2/stasiun?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/stasiun?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/stasiun', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 1, nama: 'Norval Goyette IV' }, { id: 2, nama: 'Dr. Abbigail Price' }, { id: 3, nama: 'Prof. Kamren Dickens DVM' }, { id: 4, nama: 'Minerva Hirthe' }, { id: 5, nama: 'Muriel Gibson' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/stasiun?page=1', last: 'http://localhost/api/v2/stasiun?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/stasiun?page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/stasiun', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v2 - Stasiun'
    '/api/v2/android/users/{id}':
        get:
            summary: 'Get Detail User.'
            description: 'User detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    nama: 'Yoshiko Gottlieb'
                                    email: katheryn42@okeefe.biz
                                    email_verified_at: '2020-12-10T17:18:48.000000Z'
                                    image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum'
                                    created_at: null
                                    updated_at: null
                                properties:
                                    id: { type: integer, example: 1 }
                                    nama: { type: string, example: 'Yoshiko Gottlieb' }
                                    email: { type: string, example: katheryn42@okeefe.biz }
                                    email_verified_at: { type: string, example: '2020-12-10T17:18:48.000000Z' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User '
        put:
            summary: 'Update User.'
            description: 'User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    nama: 'Yoshiko Gottlieb Updated'
                                    nip: '2401108140514821'
                                    email: katheryn42@okeefe.biz
                                    email_verified_at: '2020-12-10T17:18:48.000000Z'
                                    image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum'
                                    role: 0
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: '2020-12-12T02:26:55.000000Z'
                                properties:
                                    id: { type: integer, example: 1 }
                                    nama: { type: string, example: 'Yoshiko Gottlieb Updated' }
                                    nip: { type: string, example: '2401108140514821' }
                                    email: { type: string, example: katheryn42@okeefe.biz }
                                    email_verified_at: { type: string, example: '2020-12-10T17:18:48.000000Z' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }
                                    role: { type: integer, example: 0 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-12T02:26:55.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"email\": [\n         \"The email field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User '
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'User name.'
                                    example: 'Yoshiko Gottlieb Updated'
                                email:
                                    type: string
                                    description: 'User email.'
                                    example: katheryn42@okeefe.biz
                                image:
                                    type: string
                                    description: 'User profile picture in URI Base64.'
                                    example: uribase64
                            required:
                                - nama
                                - email
                                - image
        patch:
            summary: 'Partial Update User.'
            description: 'User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 1
                                    nama: 'Yoshiko Gottlieb Partial Update'
                                    nip: null
                                    email: katheryn42@okeefe.biz
                                    email_verified_at: '2020-12-10T17:18:48.000000Z'
                                    image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum'
                                    role: 0
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: '2020-12-12T02:26:55.000000Z'
                                properties:
                                    id: { type: integer, example: 1 }
                                    nama: { type: string, example: 'Yoshiko Gottlieb Partial Update' }
                                    nip: { type: string, example: null }
                                    email: { type: string, example: katheryn42@okeefe.biz }
                                    email_verified_at: { type: string, example: '2020-12-10T17:18:48.000000Z' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }
                                    role: { type: integer, example: 0 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: '2020-12-12T02:26:55.000000Z' }
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama must be a string.\"\n     ],\n     \"email\": [\n         \"The email must be a string.\"\n     ],\n     \"password\": [\n         \"The password must be a string.\"\n     ],\n     \"image\": [\n         \"The image must be a string.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User '
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'User name.'
                                    example: 'Yoshiko Gottlieb Partial Update'
                                email:
                                    type: string
                                    description: 'User email. Example:'
                                    example: null
                                image:
                                    type: string
                                    description: 'User profile picture in URI Base64.'
                                    example: null
                                password:
                                    type: string
                                    description: 'New user password.'
                                    example: null
        parameters:
            -
                in: path
                name: id
                description: 'The id of user.'
                example: 1
                required: true
                schema:
                    type: integer
    /api/v2/android/users:
        get:
            summary: 'Get List User'
            description: "Will returns user list.\n\n### orderBy query supported fields:\n* All field of barang detail"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: ''
                    example: '-id'
                    required: false
                    schema:
                        type: string
                        description: ''
                        example: '-id'
                -
                    in: query
                    name: onlyTrashed
                    description: 'Retrive deleted admin user if true.'
                    example: null
                    required: false
                    schema:
                        type: string
                        description: 'Retrive deleted admin user if true.'
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be admin or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be admin or super admin to do this.' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 5, nama: 'Ms. Josie Macejkovic', email: hmonahan@bergnaum.net, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/0077aa?text=odio' }, { id: 4, nama: 'Mrs. Blanche Wisoky', email: vstanton@monahan.info, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff33?text=et' }, { id: 3, nama: 'Trystan Bogisich', email: amalia.murray@hotmail.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff11?text=quia' }, { id: 2, nama: 'Tressa Kling', email: lgrimes@hodkiewicz.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ffbb?text=cum' }, { id: 1, nama: 'Yoshiko Gottlieb Updated', email: katheryn42@okeefe.biz, email_verified_at: '2020-12-10T17:18:48.000000Z', image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }]
                                    links: { first: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', last: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/android/users', per_page: 20, to: 5, total: 5 }
                                properties:
                                    data: { type: array, example: [{ id: 5, nama: 'Ms. Josie Macejkovic', email: hmonahan@bergnaum.net, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/0077aa?text=odio' }, { id: 4, nama: 'Mrs. Blanche Wisoky', email: vstanton@monahan.info, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff33?text=et' }, { id: 3, nama: 'Trystan Bogisich', email: amalia.murray@hotmail.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ff11?text=quia' }, { id: 2, nama: 'Tressa Kling', email: lgrimes@hodkiewicz.com, email_verified_at: '2020-12-10T17:18:49.000000Z', image: 'https://via.placeholder.com/640x480.png/00ffbb?text=cum' }, { id: 1, nama: 'Yoshiko Gottlieb Updated', email: katheryn42@okeefe.biz, email_verified_at: '2020-12-10T17:18:48.000000Z', image: 'https://via.placeholder.com/640x480.png/00ddee?text=nostrum' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', last: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/android/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/android/users', per_page: 20, to: 5, total: 5 } }
            tags:
                - 'v2 - User '
    '/api/v2/web/users/{id}':
        get:
            summary: 'Get Detail Admin User.'
            description: 'Admin User detail can be retrieved using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    id: 6
                                    nama: 'Dr. Mathias Rohan II'
                                    nip: '4539422570508851'
                                    image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus'
                                    role: 2
                                    stasiun_id: null
                                    created_at: null
                                    updated_at: null
                                properties:
                                    id: { type: integer, example: 6 }
                                    nama: { type: string, example: 'Dr. Mathias Rohan II' }
                                    nip: { type: string, example: '4539422570508851' }
                                    image: { type: string, example: 'https://via.placeholder.com/640x480.png/008800?text=doloribus' }
                                    role: { type: integer, example: 2 }
                                    stasiun_id: { type: string, example: null }
                                    created_at: { type: string, example: null }
                                    updated_at: { type: string, example: null }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User Admin'
        put:
            summary: 'Update Admin User.'
            description: 'Admin User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"id\": 6,\n \"nama\": \"Tono\",\n \"nip\": \"SA1234567,\n \"email\": null,\n \"email_verified_at\": null,\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 2,\n \"stasiun_id\": 1,\n \"created_at\": null,\n \"updated_at\": \"2020-12-10T17:18:49.000000Z\"\n}"
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama field is required.\"\n     ],\n     \"nip\": [\n         \"The nip field is required.\"\n     ],\n     \"password\": [\n         \"The password field is required.\"\n     ],\n     \"image\": [\n         \"The image field is required.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User Admin'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: Tono
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: SA1234567
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: UnguessablePassword
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: uribase64
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: '1'
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: '2'
                            required:
                                - nama
                                - nip
                                - password
                                - image
        delete:
            summary: 'Delete Admin User.'
            description: "Admin User can be deleted using this API.\nOnly super admin can delete admin."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                204:
                    description: '204, delete success'
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User Admin'
        patch:
            summary: 'Partial Update Admin User.'
            description: 'Admin User can be updated using this API.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, success'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"id\": 6,\n \"nama\": \"Tono Partial Update\",\n \"nip\": \"SA1234567,\n \"email\": null,\n \"email_verified_at\": null,\n \"image\": \"https://via.placeholder.com/640x480.png/008800?text=doloribus\",\n \"role\": 2,\n \"stasiun_id\": 1,\n \"created_at\": null,\n \"updated_at\": \"2020-12-10T17:18:49.000000Z\"\n}"
                400:
                    description: '400, bad request'
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "{\n \"message\": \"Validation Error\",\n \"errors\": {\n     \"nama\": [\n         \"The nama must be a string.\"\n     ],\n     \"nip\": [\n         \"The nip must be a string.\"\n     ],\n     \"password\": [\n         \"The password must be a string.\"\n     ],\n     \"image\": [\n         \"The image must be a string.\"\n     ]\n}"
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be owner or super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be owner or super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User Admin'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                nama:
                                    type: string
                                    description: 'Admin/super admin name.'
                                    example: 'Tono Partial Update'
                                nip:
                                    type: string
                                    description: 'NIP admin/super admin.'
                                    example: null
                                password:
                                    type: string
                                    description: 'Account password.'
                                    example: null
                                image:
                                    type: string
                                    description: 'Admin/super admin profile picture in URI Base64.'
                                    example: null
                                stasiun_id:
                                    type: numeric
                                    description: 'id stasiun where admin/super admin work.'
                                    example: null
                                role:
                                    type: numeric
                                    description: 'Role code of admin (1) and super admin (2).'
                                    example: null
        parameters:
            -
                in: path
                name: id
                description: 'The id of admin user.'
                example: 6
                required: true
                schema:
                    type: integer
    '/api/v2/web/users/{id}/restore':
        patch:
            summary: 'Restore Deleted Admin User.'
            description: "Deleted Admin User can be restored using this API.\nOnly super admin can restore admin."
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, restore success'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'User restored.'
                                properties:
                                    message: { type: string, example: 'User restored.' }
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not owner or super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                404:
                    description: '404, data not found'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Not Found'
                                properties:
                                    message: { type: string, example: 'Not Found' }
            tags:
                - 'v2 - User Admin'
        parameters:
            -
                in: path
                name: id
                description: 'The id of admin user.'
                example: 6
                required: true
                schema:
                    type: integer
    /api/v2/web/users:
        get:
            summary: 'Get List Admin User'
            description: "Will returns admin list including super admin.\n\n### orderBy query supported fields:\n* All field of barang detail"
            parameters:
                -
                    in: query
                    name: orderBy
                    description: ''
                    example: '-id'
                    required: false
                    schema:
                        type: string
                        description: ''
                        example: '-id'
                -
                    in: query
                    name: onlyTrashed
                    description: 'Retrive deleted admin user if true.'
                    example: null
                    required: false
                    schema:
                        type: string
                        description: 'Retrive deleted admin user if true.'
                        example: null
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: '401, Unauthorized'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Token not provided'
                                properties:
                                    message: { type: string, example: 'Token not provided' }
                403:
                    description: '403, not super admin'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'You must be super admin to do this.'
                                properties:
                                    message: { type: string, example: 'You must be super admin to do this.' }
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 7, nama: Admin, nip: A12345, image: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/users/image/7', role: 1, stasiun_id: 1 }, { id: 6, nama: 'Dr. Mathias Rohan II', nip: '4539422570508851', image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus', role: 2, stasiun_id: null }]
                                    links: { first: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', last: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/web/users', per_page: 20, to: 2, total: 2 }
                                properties:
                                    data: { type: array, example: [{ id: 7, nama: Admin, nip: A12345, image: 'https://storage.googleapis.com/megabitlostnfound.appspot.com/users/image/7', role: 1, stasiun_id: 1 }, { id: 6, nama: 'Dr. Mathias Rohan II', nip: '4539422570508851', image: 'https://via.placeholder.com/640x480.png/008800?text=doloribus', role: 2, stasiun_id: null }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', last: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: '&laquo; Previous', active: false }, { url: 'http://localhost/api/v2/web/users?orderBy=-id&page=1', label: 1, active: true }, { url: null, label: 'Next &raquo;', active: false }], path: 'http://localhost/api/v2/web/users', per_page: 20, to: 2, total: 2 } }
            tags:
                - 'v2 - User Admin'
components:
    securitySchemes:
        default:
            type: http
            scheme: bearer
            description: ''
security:
    -
        default: []
